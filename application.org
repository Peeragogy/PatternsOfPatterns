#+Title: PATTERNS OF PATTERNS
#+AUTHOR: É T A L E
#+Date: June 14th 2021
#+BIBLIOGRAPHY: /home/joe/pattern-reboot/main.bib
#+LATEX_HEADER: \usepackage[a4paper,bindingoffset=0.2in,left=1in,right=1in,top=1in,bottom=1in,footskip=.25in]{geometry}
#+LATEX_HEADER: \usepackage[dvipsnames]{xcolor}
#+LATEX_HEADER: \usepackage{fontspec}
#+LATEX_HEADER: \usepackage{natbib}
#+LATEX_HEADER: \usepackage[math-style=french]{unicode-math}
#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \setmonofont[Color=blue]{Ubuntu Mono}
#+LATEX_HEADER: \newfontfamily{\mm}[Color=red]{DejaVu Sans Mono}
#+LATEX_HEADER: \setmainfont[BoldFont=EB Garamond,BoldFeatures={Color=ff0000}]{EB Garamond}
#+LATEX_HEADER: \newcommand{\hookuparrow}{\mathrel{\rotatebox[origin=c]{90}{$\hookrightarrow$}}}
#+LATEX_HEADER: \definecolor{pale}{HTML}{fffff8}
#+LATEX_HEADER: \definecolor{orgone}{HTML}{83a598}
#+LATEX_HEADER: \definecolor{orgtwo}{HTML}{fabd2f}
#+LATEX_HEADER: \definecolor{orgthree}{HTML}{d3869b}
#+LATEX_HEADER: \definecolor{orgfour}{HTML}{fb4933}
#+LATEX_HEADER: \definecolor{orgfive}{HTML}{b8bb26}
#+LATEX_HEADER: \definecolor{gruvbg}{HTML}{1d2021}
#+LATEX_HEADER: \newenvironment*{emptyenv}{}{}
#+LATEX_HEADER: \usepackage{sectsty}
#+LATEX_HEADER: \sectionfont{\normalfont\color{red}\selectfont}
#+LATEX_HEADER: \subsectionfont{\normalfont\selectfont}
#+LATEX_HEADER: \paragraphfont{\normalfont\selectfont}
#+LATEX_HEADER: \subsubsectionfont{\normalfont\selectfont\color{black!50}}

* Methods
<<methods>>
** Pattern                                                            :KISS:
   :PROPERTIES:
   :CUSTOM_ID: background
   :END:

LET’S BEGIN by setting to one side any specialist notion of ‘patterns’
that we may have in mind, and think about patterns in a fundamental
way.  Some patterns repeat in /space/ (like a tiling). Some patterns
repeat in /time/ (like a beat).  Some patterns repeat in both /space and
time/ (like a wave).  In the physical world, it would seem that
patterns cannot repeat exactly, or forever.  The elements that
comprise a pattern are subject to spatial or temporal displacement,
and other forms of variation.

Let’s explore the notion of ‘design pattern’ starting from this
foundation.  Leitner supplied the following summary: "[Design]
Patterns are shared as complete methodic descriptions intended for
practical use by experts and non-experts" \citep{leitner2015a}.  As we
look into the matter further, two central features emerge.  Like an
ellipse, the concept of the design pattern has two main foci: context
and community.

- /Context/ shapes and constrains the type of activity which is being considered, such as designing a building, or writing software.
- /Community/ encompasses the stakeholders --- experts and non-experts alike --- who are involved with or affected by a particular project.

Integral to the basic concept of a design pattern is a third feature
that describes the interaction of the community and the context.  This
is that they use the pattern to overcome some real or potential
/conflict/ that they experience within this context.  The conflict is
also referred to as a /problem/; it’s resolution is described a
/solution/.

Alexander and Poyner emphasised that ‘design’ is not needed when the
conflict has an obvious or straightforward solution.  For example, you
typically would not need a design process surrounding /sitting in a
chair/, because “under normal conditions each one of the tendencies
which arises in this situation can take care of itself”
\citep[p.~311]{alexander1970a}.

All of this means that design patterns need to achieve something
fairly subtle.  Each represents the synthesis of a repeatable solution
to a type of conflict which itself repeats within a particular
context.  Furthermore, it does this a way that makes the solution
teachable, learnable, and otherwise replicable within a given
community.  However, if the design pattern makes the solution to the
problem too obvious, then “design”, /per se/, is no longer needed![fn::
For example, Peter Norvig argued that we see fewer design patterns in
dynamic and functional languages, because these languages embed many
of the concepts that the patterns that are explicitly used in OOP
/describe/.]  Accordingly, we might say that the design pattern carries
with it a fragment of irreducible complexity.  This perspective may or
may not be surprising.

Alexander had described the need for patterns when things get complex
cite:alexander1964notes.  He specifically focuses on what could be
called “horizontal” complexity, a situation where there are a lot of
moving parts and relations between them.  Methodologically this is
elaborated with the notion of a /pattern language/.  Pattern languages
have a property of unfolding, from more general to more specific.
However, they seem to leave open deeper forms “vertical” complexity,
where there are deep historical or ontogenetic causes, or complex
conceptual issues, which are not necessarily expressible in
pattern-theoretic terms.  Let’s have another look at these issues by
way of two contrasting metaphors.

The first metaphor comes from Christian Kohls, who proposed to treat
each design pattern as a journey: “a path as a solution to reach a
goal” cite:kohls2010a.  In this metaphor, design patterns are
understood to have an initial condition and an end condition, defined
within some context, which also defines a cost function on traversals
of paths.  There are two problems: the more elementary problem is to
traverse the terrain and travel from the start state to the end state
at low cost; the second problem is to find a reliably repeatable way
to do this.  Once found, the low-cost path can be described to and
traversed by others.

The second metaphor comes from Joseph Campbell, who described a kind
of “archetypal pattern” cite:shalloway2005a, one that can be found
embedded in myths and stories across diverse cultures and historical
periods.  The “hero’s journey” is also typically described with a path
cite:campbell1949a, however, in this case the path runs in a circle,
and focuses on the transformations of the hero who traverses it.
Although an account of the journey can be shared, traversal is
effectively presumed to be single-use.  The cost is typically “high.”
Nevertheless, once a myth or metaphor is established by way of a
shared narrative, the journey can be reenacted through ritual or
engaged with in other ways that solve a range of social problems
cite:handelman1998a.

This should suggest that Kohls’s metaphor does not necessarily express
the complexity that is embedded in a design pattern.  It does hint at
this complexity, because it implies a regress: where we initially had
/one/ problem (traversal + low-cost), now we have one more (traversal +
low-cost + sharable).  The added problem calls out for a solution, and
perhaps also for a method.  We should expect to see patterns for
finding, writing, and discussing patterns: and, of course, we do.

However, this material does not fully explain where design patterns
come from — or where they are going to — not an an obviously graspable
way.  To really get a handle on /the future of the pattern theory/
cite:alexander1999a, we need another approach: one that more tangles
more fully with the complexity of “wholes”.

** Causal Layered Analysis

- Redo the context, community, conflict, problem solution stuff in
  terms of the need, e.g., to deepen the context to really understand it

Reflecting back on the previous section, we can surmise that ‘design
patterns’ have multiple levels.  We can use the literature on patterns
to briefly introduce Inayatullah’s cite:inayatullah1998b,inayatullah2004causal
Causal Layered Analysis (CLA) formalism through an example.
We will look at these issues in much more detail later.

- First there is the *surface level*, which includes the familiar kinds
  of patterns that are published in papers, discussed at PLoP, or put
  into use in designs of various kinds (e.g., Christopher Alexander’s
  “Entryway Transition” pattern, but also his remarks about how people
  who attempted to apply his methods ended up placing “alcoves
  everywhere”, etc.).  This is sometimes also referred to as the
  *problem level*, and in the patterns discourse, problems abound.
- Beyond that, we have the *social phenomena* that cause the problems —
  and solutions — to emerge (e.g., more people living in cities,
  combined with the possibility of a more community-driven approach to
  design).
- Beyond that, are *worldviews* (e.g., Alexander’s view that “There is a
  central quality which is the root criterion of life and spirit in a
  man, a town, a building, or a wilderness.”).
- Lastly, there are *myths or metaphors* (e.g., Alexander idea that the
  architect’s work is done ‘for the glory of God’ (see Galle, 2020) or
  his conception that ‘primitive’ dwellings contain more ‘life’).  To
  emphasize, CLA does not dismiss myths: they are what drive the other
  layers.

So much for the ‘layers’ in Causal Layered Analysis, for the time
being.  In order to help make the CLA practicable as a /method/, we will
examine five techniques that Inayatullah refers to as the
/poststructural futures toolbox/.  Here, treat them in the classical
design pattern format, suitable both for convenient application and
critique.

*** DECONSTRUCTION
<<DECONSTRUCTION>>

- *Context*: A text: here meaning anything that can be critiqued — a movie, a book, a worldview, a person — something or someone that can be read.  (/NB/, every text has a /context/: much like every pattern has a context.)
- *Problem*: The existence ‘text’ points to a *conflict* between (1) the notion of truth as objective and universal, and (2) the text itself as historically situated or positioned within relationships of power.
- *Solution*: We break apart the text’s components, asking what is visible and what is invisible? Who or what is privileged within the text? Which assuptions does the text make preferrable?  How is ‘truth’ produced within the text?  Who is silenced?  In this way, we ‘deconstruct’ the universality of the text and show how it is contingent.

# Example: ‘How did Howard’s interviews for Tools for Thought go?’
# If people talk about ‘freedom’ we can try to find the assumptions
# - "what is freedom" - well, not the 4 freedoms in the original version
# ... back when the Americans were fighting the british.
# - because of economics stuff... slavery made sense
# - but racism was their the lower causal layer!
# - At the economic layer it was making good sense

*** GENEALOGY
<<GENEALOGY>>

- *Context*: History is not just the passage of time, but an unfolding of different positions. We consider a /concept/ or /idea/ to be historically situated in this sense.
- *Problem*: Within history, certain discourses have been hegemonic. A given term or concept will have developed through varied discourses: this observation *conflicts* with a naive notion of terms or concepts as simply ‘given’ or universally true.
- *Solution*: We ask: which discourses have been victorious in constituting the present? How have they travelled through history? What have been the points in which the issues have become important or contentious?  By tracing the evolution of a given term or concept through periods of identity or sameness, and through periods of difference or divergence, we come face-to-face with its generative potential.

# EPISTEME: How does Foucault use this term?  It’s linked to TRUTH, with the theme below.  Briefly, we start with how we grasp knowledge, the fact that Foucault was considering truth to be relative, but it was ways to access the truth — at the time.  Ways to reach it.

# — This is interesting

# GENEALOGY: it’s about looking at the RAMIFICATION of an idea — what inspired it and what did it inspire.
# Putting it back in the topic of truth: rather than looking how the thing evolved, here’s interested in how a particular *ERA* dealt with the idea — something more horizontal.  Zeitgeist — ideas from the time.  It’s not just about tracking one idea from across that time, but more about getting a perspective of how the idea was applied by the people.  STOICS: Epictetus, Senica played with care of the self.  Even though there’s chronological movement.

# Archeology is centred on the present, drawing conclusions for the present.
# Genealogy: more like a petrie dish of today

# Example: update on Joe’s collaboration with Luís
# - instead of blending, you work back up the tree

# - Foucault started as archeologist;
# Paul Vin : classicist worked on Rome, recently translated Aeneid

*** DISTANCE
<<DISTANCE>>

- *Context*: Our relationship to the present.
- *Problem*: The present seems ‘normal’, but this *conflicts* with any impetus to change.
- *Solution*: We ask: which scenarios make the present remarkable?  Make it unfamiliar? Denaturalize it?  Where are these scenarios, e.g., are they in historical space — the futures that could have been — or in present or future space? By establishing a sense of distance from the present, we can return to explore the present from a different point of view.  We are more likely to see the ever-changing character of the present, points of leverage, and how to use them.

# Example: ‘Distance’ can show up in physical space, e.g., at UT Austin    the public affairs school is in a secluded area, in a park and a somewhat obscure library; the mathematics building is adjacent to “applied mathematics” but logic and metaphysics are housed in a different part of the campus.

*** ALTERNATIVE PASTS AND FUTURES
<<ALTERNATIVE PASTS AND FUTURES>>

- *Context*: The past that we see as truth is in fact the particular writing of history: it is a text amenable to [[DECONSTRUCTION]].  The futures that we are ‘given’ are, similarly, only some of the ones that are in-principle-possible due to the evolutionary nature of concepts exposed by their [[GENEALOGY]].
- *Problem*: The past and future are put to use within discourse, resulting in some winners and some losers.  The results we see may *conflict* with our sense of what we would prefer to have happen.
- *Solution*: We ask: which interpretation of past is valorized?  What histories make the present problematic?  Which vision of the future is used to maintain the present?  Alternatively, which visions undo the unity of the present?

# Example: We can compare the histories of R and Emacs.

*** REORDERING KNOWLEDGE
<<REORDERING KNOWLEDGE>>
- *Context*: Trends and problems are emergent, historical, and political: they are embedded in complex webs of becoming.
- *Problem*: It’s not always obvious how to move /between/ the ‘layers’ mentioned above. This *conflicts* with any given effort to empower oneself with a deeper understanding of the situation.
- *Solution*: We ask: how does the ordering of knowledge differ across civilization, gender and episteme? What or Who is othered? How does it denaturalize current orderings, making them peculiar instead of universal? What tools can we use to reorder knowledge, to make it available in new forms without necessarily requiring the same historical baggage?

# Example: What are the myths and metaphors in the ‘user’ and ‘developer’ communities?  How do users and developers see themselves?  E.g., some perspectives is wrapped up in the concept of “hacker culture” which emerged in a given time and space, with a given relationship to technology.

# Maybe the documentation isn’t written down, but it is in the community
# ... I need to get to know these people and learn from the hackers
# ... cf. Hackers’ Dictionary

** PARs

# These are the key to the process of creating form
# I put the accent on the process
# Deeply I found the diagrams themself had power
# paralysed

*** TODO make a PAR pattern

Before turning to an example, we will introduce one more technique.
The US Army produced a methodology called the /After Action Review/ or
AAR cite:Training-the-Force.  AARs can be used to assign
responsibility when things ‘go wrong’, and can help people figure out
how to do better next time.  It has been used effectively in business
settings cite:learning-in-the-thick-of-it.

In a more fully collaborative and distributed peer-to-peer setting, we
needed an adaptation of the AAR that made it a more open ended. We
came up with the following template:

1. Review the intention: what do we expect to learn or make together?
2. Establish what is happening: what and how are we learning?
3. What are some different perspectives on what’s happening?
4. What did we learn or change?
5. What else should we change going forward?

When we fill in the template, we call it a /PAR/.  The acronym has stood
for various things over the years, but we feel it works best a
stand-alone term — with reference to the corresponding concept in
golf, we get a sense of how we’re doing.

Like the Army, we typically use PARs retrospectively (so, asking,
“what /did/ we expect to learn or make together?”): but they can also be
applied to look forward.  In that case, item #5 might be expanded to
include a number of different scenarios.

Some further things to note:

- PARs are related to patterns, although they don’t necessarily have
  the ‘repeating’ aspect.  Nevertheless, they help us to understand
  context, its problems and proposed solutions.  In this sense they
  might be seen as a template for proto-patterns.

- In our collaborative practice, once when we have collected a
  suitable number of PARs, we can use them as data for analysis with
  CLA. Metaphorically, this ‘integrates’ the ‘tangent vectors’ that we
  spotted when we were working together.

* Application

With the tools from Section [[methods]] at our disposal, we can now turn
to a CLA of the design patterns community.

** Understanding data, headlines, empirical world (short term change) :data:

Recall that this section is also referred to as the ‘problem’ layer
The pattern community is not short on problems: a ‘problematizing’
view of reality is one of the main features of the design pattern
method.  However, there are a range of problems that the community has
surfaced which are not fully solved.  For example, ‘Alexander's
Problem’, as described by his collaborator Greg Bryant:

#+begin_quote
His books are influential, and have inspired countless good acts. But
despite all of the tools he created, his penetrating research, his
many well-wrought projects, and his excellent writing, he did not
manage to grant, to his readers, the core sensibility that drove the
work. He also did not organize the continuance of the research program
that revolves around this sensibility. cite:bryant2015
#+end_quote
Coming from a different direction, Alexander framed a related query
for programmers using pattern methods:
#+begin_quote
What is the Chartres of programming? What task is at a high enough
level to inspire people writing programs, to reach for the stars?
cite:alexander1999a
#+end_quote
These are some of the high-level problems that are somewhat well known
in the patterns community, but which do not necessarily have consensus
answers.  More recently, Dawes and Ostwald cite:dawes2017a develop an
elegant taxonomy of existing criticisms of the pattern method:

- Conceptualisation :: Ontology, Epistemology (e.g., “Rejecting pluralistic values confuses subjective and objective phenomena”)
- Development and documentation :: Reasoning, Testing, Scholarship (e.g., “The definitions of ‘patterns’ and ‘forces’ are inexplicit”)
- Implementation and outcomes :: Controlling, Flawed, Unsuccessful (e.g., “Patterns disallow radical solutions”)

By showing how the criticisms relate to one another, Dawes and Ostwald
start to develop a [[GENEALOGY][GENEALOGY]] at level of critical perspectives.[fn:: Maybe this is a stretch of what Foucault said.]  In a
parallel work they analyse the structure of /A Pattern Language/
cite:Dawes2018.  This is important because criticisms are likely to
arise in the process of real or potential applications.  In the later
work, Dawes and Ostwald develop three alternative perspectives APL’s
contents which they refer to as the *generalised*, *creator*, and *user*
perspectives.  The latter perspectives represent different techniques
for [[REORDERING KNOWLEDGE][REORDERING KNOWLEDGE]].  We will elaborate at the next level.

** Systemic approaches and solutions (social system)                :system:

Where do the problems we encounter come from?  Using graph-theoretic
measures Dawes and Ostwald cite:Dawes2018 found that:

- The creator model appears to be /less intelligible/ than the user model, while
- The creator’s perspective of the language is /more beautiful/.

Their central finding, however, is that many patterns in which
Alexander had medium or low confidence in fact occupy a relatively
central position in /APL/'s graph:

#+begin_quote
the patterns which are most likely to be encountered by designers –
are most easily accessed, or provide greatest access to other patterns
– might be those which Alexander acknowledged were incapable of
providing fundamental solutions to the problems they addressed.
#+end_quote

This means that novice users might be /expected/ to encounter problems
in application of /APL/'s patterns: “despite its often authoritative and
dogmatic tone, Alexander’s text was framed as a work in progress,
rather than a definitive design guide” (p. 22).  Dawes and Ostwald
suggest that their analysis could point to “prime opportunities to
continue the development of /A Pattern Language/'' (p. 21).

Here, a number of issues more closely linked to software begin to crop
up.  The software patterns community has established venues like the
global PLoP conferences, and working methods like /writers workshops/.
There are a range of ‘other’ pattern discourses — ‘other’ in the sense
mentioned in our [[REORDERING KNOWLEDGE][REORDERING KNOWLEDGE]] pattern — such as PurPLSoc, or
the world of practicing architects.  There have been some attempts at
creating more systematic archives of patterns.  Importantly, the
first-ever Wiki was developed in connection with a platform for
developing, sharing, and revising pattern languages
cite:cunningham2013a.[fn::
http://wiki.c2.com/?PeopleProjectsAndPatterns][fn::
http://c2.com/ppr/] However, there was a distinction between the
discussions and the finished patterns.  In the 2013 retrospective,
Ward Cunningham writes:
#+begin_quote
The original wiki technology functioned in a direct open-source mode,
which allowed individuals to contribute small pieces to incrementally
improve the whole.
#+end_quote
This is true — for some suitable definition of “open source” — but
there was little attention to licensing or collaborative revision.
Furthermore, when it came to user rights associated with the ‘finished’ patterns,
discussions took place in “letters and replies”[fn::
http://c2.com/ppr/titles.html] — rights in the patterns themselves
were more closely guarded.[fn:: http://c2.com/ppr/about/copyright.html]

Whereas Wiki technology could in principle have been a site for
ongoing [[DECONSTRUCTION][DECONSTRUCTION]] of patterns, this didn’t seem to happen.  The
fact that this didn’t happen is itself interesting.  There were in fact /four/
published “letters and replies”,[fn:: http://c2.com/ppr/letters/index.html].
Unfortunately, we could not find a public archive of the
“design patterns mailing list” where more discussions took place.

Over the years other issues and concerns came to the fore, notably
Jenifer Tidwell’s charges against the Gang of Four (and other
developer-centric pattern languages) resonate with what we saw from
Dawes and Ostwald above:

#+begin_quote
... the reality of a software artifact that the developer sees is not
the only one that's important.  What about the user's reality?  Why
has that been ignored in all the software patterns work that's been
done?  Isn't the user's experience the ultimate reason for designing a
building or a piece of software?  If that's not taken into account,
how can we say our building -- or our software -- is “good”? — http://www.mit.edu/~jtidwell/gof_are_guilty.html
#+end_quote

# This gets back to the DIVERSITY stuff
# Alexander wanted
# Example of Facebook being designed for ‘end’ users but there are actually many different users and ‘stakeholders’...

Notice that now the /user/ of the designed artefact has entered the
story as a different figure from the “user” of the pattern language
who we met above.  Tidwell’s critique suggests at least a couple [[ALTERNATIVE PASTS AND
 FUTURES][ALTERNATIVE PASTS AND FUTURES]]: e.g., what if the end-user had been
placed at the centre the whole time?  What if the patterns existed to
facilate interaction between different stakeholders?

The fact that both her book cite:tidwell2010designing and an essay by
Jans Borchers that draws inspiration from her critique
cite:borchers2008pattern both have over 1000 citations on Google
Scholar shows that the thinking involved has been impactful.  And yet,
we wonder what the pattern community has drawn from this.

# (Comment here: Noorah’s points about customization as a way into
# free software seem related to Tidwell’s ideas.)

# https://designinginterfaces.com/firstedition/

** Worldview, ways of knowing and alternative discourse          :worldview:
The situation with licensing on c2 is particularly interesting in
light of Alexander’s perspective that /APL/ was a “living language”.  In
principle, Wiki technology might have presented the opportunity to
realise this vision fully for the first time, in a real-but-virtual
way.  Wiki technology indeed became widely influential when it was
combined with a free content license on Wikipedia (originally GNU FDL,
later CC-By-SA).

Fast-forwarding to the present day, Christopher Alexander’s website
=patternlanguage.com= writes about [[https://www.patternlanguage.com/membership/memberstour3-struggle.html][The Struggle for People to be Free]] —
but it does not reference freedom in the Stallman sense.

Although he was concerned: “Instead of being widely shared, the
pattern languages which determine how a town gets made becomes
specialized and private.”  Now in 2021 the pattern language is /not/
available.

Gabriel and Goldman talk about sharing and ‘gift culture’ in their essay [[https://dreamsongs.com/MobSoftware.html][Mob
Software: The Erotic Life of Code]], and discuss a way of working that
seems to bring back the early days of hacker culture.  They reference
the open source community — but not the free software community, so we
will follow Gabriel and Goldman’s usage here — as the origin of Mob
Software.

#+begin_quote
Because the open source proposition asked the crucial first question,
I include it in what I am calling “mob software,” but mob software
goes way beyond what open source is up to today.
#+end_quote

That crucial first question is:

#+begin_quote
What if what once was scarce is now abundant?
#+end_quote

It is well known that the PLoP conference series is significantly
influenced by Gabriel.  The series features attention not only to
workshops cite:gabriel2002a but also /games/, informal gifts, and
creating a sense of psychological safety: indeed, the central issue of
making a space where ‘failure’ is OK and even celebrated, as per Mob
Software.

The essay emphasises its own criticisms of open source:

#+begin_quote
Unfortunately, the open-source community is extremely conservative
... Although the classic open-source licenses permit forking, it
rarely happens because a fork is a failure—there is a right place to
go and a right thing to build.
#+end_quote

(Five years later, with the creation of Git, forking became
considerably more typical.)  Resonating with Tidwell’s critique from
above:

#+begin_quote
One difference between open source and mob software is that open
source topoi are technological while mob software topoi are people
centered.
#+end_quote

On a technical basis, Gabriel’s vision sounds a lot like today’s world
of /microservices/.

#+begin_quote
Picture this: All devices that include computing elements are
connected, and their collective software forms one large
system. ... Almost all the source code for this massive
system—estimated in the billions of lines of code—is available under a
license that grants total recombination rights: Any fragment of source
code can be used for any purpose.
#+end_quote

While this vision hasn’t fully come to pass — there are still many
proprietary services — nowadays many big companies are also big
proponents of open source.  Here it is useful to employ the [[DISTANCE][DISTANCE]]
pattern, and think about what might make the current situation
exceptional.  Gabriel himself uses the technique of scenarious to
imagine [[ALTERNATIVE PASTS AND FUTURES][ALTERNATIVE PASTS AND FUTURES]], e.g., imagining a future in
which:

#+begin_quote
Mentoring circles and other forms of workshop are the mainstay of
software development education. There are hundreds of millions of
programmers.
#+end_quote

Here we aim to go deeper into the foundations of the worldview that
Gabriel puts forth.  Usefully, an article by VanDrunen “traces the
source of Gabriel’s ideas by examining the authorities he cites and
how he uses them and evaluates their validity on their own terms”
cite:vandrunenchristian.  His critique works as a (frankly quite
brilliant) [[DECONSTRUCTION][DECONSTRUCTION]] of the thinking behind Gabriel’s essay.
Some key excerpts follow.[fn:: Maybe these should be organised using
the same taxonomy of critiques we introduced above. -JC]

- “Kauffman’s work is about a rediscovery of the sacred, and it amounts to a proposal of the laws of self-organization as a new deity”
- “One thing we find in common with Lewis Thomas’s ants, Kauffman’s autocatalytic sets of proteins, and the agents inhabiting Sugarscape is that they all lack intelligence.”
- “In other words, the rules given by Gabriel describe only the conforming aspect of group behavior. In reality, there is a tension between independent and conforming tendencies, and the flock patterns emerge from the interaction between the two.”
- “His examples of “mob activity” among people—the making of the Oxford English Dictionary, cathedral-building, and open source software discussed later—all had oversight, master-planning of some sort.”
- “There are several distinct senses of ‘gift’ that lie behind these ideas, but common to each of them is the notation that a gift is a thing we do not get by our own efforts.” (quoting Hyde)
- “Certainly proprietary code is shared property among those working in a corporate development team, but it is not common to the larger community of software developers and users.”
- “A computer program is not like a poem or a dance in this way; if the programmer is not able to produce something parsable in the programming language or cannot fit the instructions together in a logical way, the program simply will not work.”
- “Gabriel’s own experience may color his perception. He founded a software company that produced programs for Lisp development and which went bankrupt after 10 years.”
- “Moreover, if Gabriel means to suggest that these programming languages or models could have made programming more accessible to the masses lacking technical skill, it is quite a dubious claim,”

** Myths, metaphors and narratives: imagined (longer term change) :narrative:

- Red oni, blue oni japanese demon figures!

In the metaphor for CLA preferred by futurist Rebecca Ryan: having
descended through the sunlight, twilight, and midnight zones, we now
come to the abyss.  This will afford us a view from 20000 feet /below/
the surface.  We are likely to find some things that appear strange.
At this level, we connect with the cultural themes that support the
worldview discussed above.

To start with, let’s return to Alexander’s lecture “The origins of
pattern theory: the future of the theory, and the generation of a
living world”, presented at IEEE and published in /IEEE Software/.  This
is an important nexus between the world of architectural and software
patterns.  In fact, he posits [[ALTERNATIVE PASTS AND FUTURES][ALTERNATIVE PASTS AND FUTURES]] in which
the separation between these domains dissolves.  What are left with
/generative patterns/.

cite:bishop2020holistic

[[DISTANCE][DISTANCE]]: actually we are seeing some of these things taking shape?

*** Social and ethical issues in computing
Even if we disagree with what Gabriel says, the way he says it is interesting!

One paper we read as a class was entitled “How Computer Systems Embody
Values” (Nissenbaum, 2001).

#+begin_quote
I believe, however, that we do see values and beliefs reflected in the
way we program and what we program, but that the reflection comes only
in subtle ways, aspects like the purpose and motivation for the
software and the human interaction around the development of the
software, much more so than the design or coding itself.
#+end_quote

*** Order
Gabriel uses this assumption to disdain authority and any deliberate organization.
*** Gender
Margolis and Fisher, likewise, describe the “person in love with
computers, myopically focused on them to the neglect of all else,
living and breathing the world of computing,” (Margolis and Fisher,
2002, pg 65). The image of such people, they say, turns many people,
especially women, away from the field of computing.
*** God, creativity
- Weizenbaum explains, The computer programmer, however, is a creator of universes for which he alone is the lawgiver.
- it is founded on a presupposition that God is not the orderer of the universe
*** Flocks, sheep, shepherds
This is interesting in light of an observation by Rich Hickey, about
/aggregates/:
#+begin_src
Partial information

+ when requiring / providing aggregates
+ aggregate
  from ad- "to" + gregare "flock / herd"
+ information that travels together
#+end_src
*** Code gardens
What is programming? Is it a leisure activity, like gardening... etc.
*** Programming decontextualised

This is an important admission:

#+begin_quote
In fact, more specifically than that, we are concerned with the task
of programming or coding, which is only one step in the software
development process (other activities include specification, design,
documentation, testing, and maintenance).
#+end_quote

*** Hacker lifestyle
In fact, the “way of hacking you like” (Gabriel, 2000, pg 1) with
which Gabriel tantalizes his audience embodies the very stereotype
that keeps the masses away.
*** Alexander cathedrals
Christopher Alexander’s
denial that “some great architect created these buildings,
*** Does Gabriel’s critique of FLOSS apply to the pattern community itself
“small core teams led by module owners who are strict gatekeepers”
*** End user modifications
“No one would mistake the modifications I have made to my home for
something done by a professional.”

That’s interesting... maybe this is because software itself isn’t a
very plastic medium.  But we have the syntax of the software and the
idea of a computer and these are very different things.

*** Software vs architecture
The reality of software is not inherently embedded in space. Hence it has no ready
geometric representation
*** Practice
My practice was to learn algorithms by coding them.
*** Convergent/Divergent

Mob-software projects tend to be divergent

Perhaps a better example of the work of the mob in computing technology, in Gabriel’s
view, is the variety of uses (and users) of the World Wide Web.

*** The hacker ethic

- We seem to have a contradiction between the individually important
  architect and “the mob” (resonating with Tidwell’s concerns for
  end-users).

*** The mob
Mob software is produced by an aggregate effort of programmers
who are “not individually important”

The rise of the software industry, however, killed the nascent mob software approach.

*** Master planning
#+begin_quote
Software development methodologies evolved under this regime along
with a mythical belief in master planning.
#+end_quote
*** Software

Importantly, Gabriel’s lecture can be seen as the response of the
software community.  It took place the next year in front of the same
body.[fn:: fact check]  It imagines similar outcomes.

#+begin_quote
Early computing practices evolved under the assumption that the only
uses for computers were military, scientific, and engineering
computation—along with a small need for building tools to support such
activities.
#+end_quote

JC: That could be related to the history in /Tools for Thought/ of the
‘radicals’ at all phases who were eager to understand how their minds
work.  VanDrunen says that

#+begin_quote
It was engineering and science types, as opposed to, for example,
artists, who defined how software production was done and understood.
#+end_quote

But this is not what Rheingold’s history confirms: Rheingold tells a
history of the basically psychedelic nature of computing, one in which
the key figures are social renegades and polymaths who may as well be
artists.

*** Duende

The concept of duende is difficult to pin down. It is a
personification of a kind of spirit of artistic
spontaneity. Etymologically, it comes from duen de casa, “master of
the house.”

The duende is a demonic earth spirit who helps the artist see the
limitations of intelligence

JC: So it sounds rather like the clown in cite:handelman1998a.

[I]f you take the fear of humiliation. . . and you try to trace it, you realize that you
have a whole series of linkages in your mind which ultimately go back to the fear of
death. For example, if you are mocked you may lose your job, and if you lose your
job perhaps you will end up in the gutter. . . (Grabow, 1983, pg 86)

The mythology of the rich in the overproducing nations that the poor
are in on some secret about satisfaction ... [has] a basis, for people
who live in voluntary poverty or are not capital-intensive do have
more ready access to erotic forms of exchange that are neither
exhausting nor exhaustible and whose use assures their plenty

*** Scarcity
An important aspect of this Gabriel’s critique is that that it is not
just a matter of getting access to source code that creates a
condition of “freedom”.  As VanDrunen put it:

- “The meaning is, what if there were more people with significant skill in developing software? How would that change how software is developed and distributed and to what uses software is put?”

This is developed in more recent thinking by R. M. Unger.

*** Gift culture
The specific cultural understanding of how ‘gifts’ are meant to be
used and consumed might cast some light on the otherwise confusing
preference for open access at PLoP.  But perhaps more fundamental is
the notion of an /object/. 


- “Hyde contrasts the spirits of gift and commodity economies with the Greek words eros and logos. In his mind, eros stand for imagination, logos for logic; eros for synthesis, logos for analysis or dialectic; eros for bonding (including the bonding of people in a relationship), logos for differentiating into parts.”

# DECONSTRUCTION, GENEALOGY, DISTANCE, ALTERNATIVE PASTS AND FUTURES, REORDERING KNOWLEDGE


* Discussion?
# - Walking in 2 different directions through familiar territory
# - rekindling a sense of humility!
# - E.g., fomenting ability to INTERRUPT
** Next steps

- NNexus + recommender for learning
- Point out that this applies to synthesis later on
 - Would be useful to have

- What does change at the myth level look like?
- The ship that came in 1619 was actually a pirate ship, they happened to find slaves rather than gold...
  - Remarkable...!
  - It went back to the particular pirate ship but once it got started, then you started to invent myths, "the South"
  - 400 years later, you have /controversy over the statues/.
  - We don’t use ‘Altavista’ any more but we still know what it is, you can’t get rid of the symbol

- ‘Patterns’ are more at the immediate level
- Nevertheless, the patterns may embodying a worldview (e.g., at least the worldview of design) — rather than the deep

- Needing to build schools, user interfaces, etc.
- Comment about silos: how *interoperable* are the patterns?
  - I don’t care to be rewriting the whole thing
  - I need some math, come to our next session... no I just want to explain these (familiar critique in the peeragogy project)
    - But now we got a bunch of newcomers saying we want to write a 5 page intro
    - This could get back to conceptual blend
    - ‘Peeragogy and Handbook’
    - ‘Wikipedia’ is a wiki and an encyclopedia; then you get WikiData...
- In this ghetto we do Alexander patterns, here we do 15 principles, here it’s Takashi...
- Which are the problems that are /invisible/ (the fish doesn’t see the water it is swimming in)
  - They think of their own freedom but not that of the other people’s priorities
- E.g., you’re supposed to go in person to join the Workshop...

- Rejecting pluralistic values, and others...
- Cf. our annotated bibliography in Google Drive

We aim to surface answers to some of the questions and concerns raised
in the introduction.

- One of our challenges with the Futures paper was that they were not well-versed in patterns
- That problem doesn’t exist if we are submitting to PLoP, but we have the opposite problem
- So, keep it light with CLA — with our previous paper, it was trying to push the Futures and Patterns literature at the same time

- What if I’ve built things at this level, but I haven’t dealt with this.
- Then maybe you have a dominance of rosy glasses problems-and-solutions
  - Does this then mean “oh we just need new patterns?”
  - The mythos is intact even though you changed the surface
  - “dominant group” persists; ‘divine right of kings’ or the mythos of the caste system; feet of the original humans
  - Patterns and anti-patterns (and CLA) of communism would be an interesting sequel
  - Bolsheviks had the /idea of a professional revolutionary/.

** Callback to design as blending in the previous paper
** Callback where relevant to peer learning and peer production in the first paper
** Other notes

In a way, the need for a ‘complexity of wholes’ should not be
surprising in light of current perspectives from neuroscience
cite:mcgilchrist2019master.  (NB I think there was someone who showed
up at Cicolab a while ago who had written a paper on patterns and
systems or patterns and complexity theory.)

- Go in, /patterns/ don’t need to be defined; we can make a nice clean reference to our PLoP paper
- Do people only recognise myths until they encounter different cultures?
- It’s /dynamic/ moreso than /robust/ or /resilient/ — behind the terms, you might find that adaptive capacity is compatible
 - Branching processes; 1 customer tells 2 of their friends.
 - Is the growth-rate bigger than the death rate?  If so it will grow until whatever carrying capacity.
 - We need social distances on youtube...
 - Survival analysis in Tim’s thesis?
- It’s not just the meme going viral, it’s also spawning whole discourses
 - it can’t just branch forever, it will run into new limitations; and what is the individual?
 - what if these interact so much that it becomes the new individual?
  - This is how we spread the new myth, but it then dominates
  - E.g., with the pattern community, this isn’t too much /unlike/ Alexander’s dynamics that Ray’s been reading about in /Synthesis of Form/
  - E.g., I don’t always control things — this is evolution not intelligent design.  I’m a co-creator!  The dao will be flowing, but I may be able to skillfully move things around and work with it.  This doesn’t negate design patterns, I just need to understand their scope.  In a very simple case of design, these are materials I can master them.
  - E.g., I made the design with plastic, vs natural stone with weakness points... you’re also engaging with an outside world
- Solutions, problems, and context — the context may be active and dynamic!
- We were talking about Alexander and the design of a rocket.  Getting to the moon is difficult, we have 2 big moving bodies nearby.  I need to plot a trajectory in this context; it’s not as simple as shooting as a moving target; there’s a lot going on... this could lead to all kinds of counterintuitive things.
- Analua was talking about /deep resiliance/ — would this relate to the /adaptive capacity/ stuff


# ‘Participatory nature’ + there may be users
# ‘Patterns existing at the litany level’ is worthy of the pattern
# Burn books, make up stories of the past — vs — empowering the citizens (making your own myths)

# today more and more design problems are reaching insoluble levels of complexity... a background... specialist information, widespread, disorganized... specialists... never best clear — This is definitely

# Traditional builder knew about alcoves — and you learned the
# patterns, you didn’t need to write them down (cf. PNG culture as a
# boundary case).

# nowadays we have new kinds of materials... we now need to think it w/
# modern materials

# “IKEA effect” people actually like them because they put things together

# Problems were so rare that there were not actual designers!

# Down to the level of “brass tacks”

# Copy had to be exact — personal intuition — emphasis on intuition
# 2 hemispheres, 2 cultures
# — logic and geometry vs intuition

# In a well-functioning there are interconnections between brain centres
# (and turn each other off, selectively; the society of mind isn’t having a civil!)

# So, remind people what Alexander said at the beginning
# — cf. the critiques of patterns taxonomy — almost like the LITANY CONCEPT
# — have others mentioned things about ‘open source’?

- Feminism (white women) and anti-racism (black men); neither is actively harmed.
- Deeper layer: we /deal with causes/ (in two senses) rather than /humanity/ in general.
  - MLK vs ‘I am a man’ signs (just because I carry garbage)
  - Can relate to wholeness
  - People tend to think about humanity in terms of the particulars of their culture.
  - You don’t want to get rid of a ‘bias by race’ and then find some other group is at the bottom!!!
  - The real solution may involve revising myths (e.g., Horatio Alger)
  - Mulitple literacies (like the ROSETTA STONE as a symbol in the Jung sense of a symbol)
  - Thoth emerald tablet
- We could have lived in an alternative history in which pantheism was dominant
- Isis cults even in London (and maybe Oxford)
  - Maybe it would be a ‘dominant-nondominance’: we want a more pluralistic time, with a variety of different cults.
  - Joseph could have invented Freud’s theory and we might have had ‘dream cults’

** Further
- What is your context? Maybe deepening your context?
* Conclusion
** 1. Review the intention: what do we expect to learn or make together?
** 2. Establish what is happening: what and how are we learning?
** 3. What are some different perspectives on what’s happening?
** 4. What did we learn or change?
** 5. What else should we change going forward?

* The end :ignore:

#+begin_export latex
\bibliographystyle{unsrt}
\bibliography{./main}
#+end_export
